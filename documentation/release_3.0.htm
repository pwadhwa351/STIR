<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>
    <title>Summary of changes in STIR release 3.0 (dated 25/04/2014)</title>
  </head>

  <body>
    <h1>Summary of changes in STIR release 3.0 (dated 25/04/2014)</h1>

<p>This version is almost backwards compatible with STIR 2.4 for the user (see below), but <strong>not for 
developers</strong>. Required code changes are minor however and detailed below.
</p>
<p>This release is the first to handle SPECT data properly.
It contains code by Carl&eacute;s Falc&oacute;n (Biomedical Image Group (GIB), Universitat de Barcelona)
to create the system matrix for SPECT, integrated into STIR by Bert&aacute; Mart&iacute; Fuster 
(Institute for Bioengineering of Catalonia) and Kris Thielemans 
(University College London, Algorithms and Software Consulting Ltd), together with some
additions and minor bug fixes by the same authors.
Additional testing by Charalampos Tsoumpas (KCL), Lefteris Livieratos (KCL) and 
Kjell Erlandsson (UCL). This work was the result of a collaboration between University of Barcelona,
King's College London and University College London, and is reported in</p>
  <ul>
  <li>
  Berta Marti Fuster, Carles Falcon, Charalampos Tsoumpas, Lefteris Livieratos, Pablo Aguiar, Albert Cot, Domenec Ros and Kris Thielemans,<br />
  <i><cite>Integration of advanced 3D SPECT modeling into the open-source STIR framework</cite></i>,<br />
  Med. Phys. 40, 092502 (2013); 
  <a href="http://dx.doi.org/10.1118/1.4816676">DOI 10.1118/1.4816676</a>.  
  </li>
  <li>
  Berta Marti Fuster, Kjell Erlandsson, Carles Falcon, Charalampos Tsoumpas, Lefteris Livieratos, Domenec Ros, Kris Thielemans, <br />
  <i><cite>Evaluation of the novel 3D SPECT Modelling Algorithm in the STIR Reconstruction Framework: Simple vs. full attenuation correction</cite></i>, <br /> 
  proc. IEEE MIC 2013, Seoul, Korea
  </li>
  </ul>


<p>In addition, this version contains updates by Kris Thielemans, UCL: changes to the IO code (currently enabled for projection data only) mean that
more information such as modality, patient position and timing is available and kept; improvements to the MPI code and tests,
some code-cleanup and improvements to the documentation.
</p>



<h2> Summary for end users (also to be read by developers)</h2>
<h3>Important bug fixes</h3>
<ul>
<li>fix PoissonLogLikelihoodWithLinearModelForMeanAndListModeDataWithProjMatrixByBin: it was processing all events up-to end-time as opposed ignoring 
the events before start-time.
</li>
</ul>

<h3>Changes that break backwards compatibility</h3>
<ul>
<li>The default projectors for the iterative reconstructions and <tt>correct_projdata</tt> have changed to
use the ray tracing projection matrix. This means that the forward and back projector (used for instance for the Poisson
log-likelihood) are now matched by default. If you did specify the projectors in your .par file, results will be identical 
to STIR 2.x, but if you did not, you could add the following to the parameters of the log-likelihood
(if you want to get the same results as with STIR 2.x):
<pre>
projector pair type := Separate Projectors
 projector pair using separate projectors parameters :=
 forward projector type := Ray Tracing
 forward projector using ray tracing parameters :=
 end forward projector using ray tracing parameters := 
 back projector type := Interpolation
 back projector using interpolation parameters :=
 end back projector using interpolation parameters := 
end projector pair using separate projectors parameters := 
</pre>
Alternatively, when building STIR, you could enable set the (advanced) CMake option
<tt>STIR_DEFAULT_PROJECTOR_AS_V2</tt> to true (not recommended).
</li>
<li>For the Poisson log-likelihood, the default is now to use subset sensitivities (as opposed 
to computing them as a fraction of the total sensitivity). This new default is more stable 
for most algorithms and in particular for OSEM (or OS-OSL) where you see less of a subset-cycle
when using the correct subset sensitivity.<br /> 
If you need to reproduce the default of STIR 2.x, you
can use the following setting
<pre>
use subset sensitivities:=0
</pre>
inside the parameters of the log likelihood.
</li>
</ul>

<h3>New directory structure</h3>
<ul>
<li>Top-level directories are now <tt>src</tt>, <tt>scripts</tt>, <tt>examples</tt>, <tt>documentation</tt>, <tt>doximages</tt>. The <tt>samples</tt> directory is now a
sub-directory of <tt>examples</tt>, and the old <tt>examples</tt> is now
<tt>examples/src</tt>.<br />
<strong>Warning: when using CMake for building, you have to point it to do the main STIR directory</strong>
(not STIR/src).
</li>
<li><tt>recon_test_pack</tt> and <tt>documentation</tt> are now distributed in
zip files that unpack as <tt>STIR/recon_test_pack</tt> and <tt>STIR/documentation</tt>.</li>
</ul>

<h3>New functionality</h3>
<ul>
<li> new projection matrix for SPECT (called <code>SPECT UB</code>) supporting parallel hole collimators 
with non-circular orbits, including attenuation modelling and 3D PSF</li>
<li>modifications to <code>ProjMatrixByBin</code> to allow larger matrices (currently needing uint64 support by the compiler) and clearing the cache</li>
<li>Interfile 3.3 IO for SPECT projection data.</li>
<li> reading and writing of images via <a href="http://www.itk.org">ITK</a>. As ITK has its own registry of 
file formats, this extends STIR to support DICOM, Nifti (.nii), MetaIO (.mhdr), NRRD (.nhdr) etc.
To enable this, you need to have ITK installed when building STIR with CMake. 
To write images in any of these file formats (DICOM not supported), you need
to set an explicit file format type and set it to <tt>ITK</tt> .<br />
<strong>Warning:</strong> The translation of the geometry between STIR and ITK
is currently incomplete as STIR <strong>ignores patient orientation</strong> and direction information for images. 
</li>
<li>New utilities <tt>forward_project</tt> and <tt>back_project</tt> for easier scripting of STIR
(<tt>fwdtest</tt> and <tt>bcktest</tt> now really only should be used for testing.)
</li>
<li>The <tt>list_projdata_info</tt> utilities has an extra option <tt>--exam</tt> to
list some exam information (patient position and timing).
</li>
<li>The distribution now includes sample scripts  (in the <tt>examples/PET_simulation</tt> folder) 
for simulating PET data, adding Poisson noise
and reconstructing the data.</li>
</ul>

<h3>Changed functionality</h3>
<ul>
<li>Interfile reading/writing has changed to accomodate SPECT. </li>
<li>Projection data IO (both static and dynamic) now keeps more information such as modality, patient position and timing. This should mean for instance that convertions between different file
formats (e.g. conv_to_ecat7, stir_math -s) preserve more information.
</li>
<li>Interfile reading now exits with an error if a vectored key (such as <tt>matrix size</tt>)
is used before its size is given with the appropriate keyword (such as <tt>number of dimensions</tt>). In prior versions of STIR, a warning was issued, but a crash could happen afterwards.
</li>
<li><tt>extract_segments</tt> now handles filenames with more than one dot. It also writes images with
voxel-size equal to the central-bin size of the sinogram (the view dimension is set to 1mm).
</li>
</ul>

<h3>Build system</h3>
<ul>
<li> 
Using <a href="http://www.cmake.org">CMake</a> is now recommended (see the wiki). Some options
such as shared libraries and SWIG support can only be enabled when using CMake. Hand-crafted project files
for Visual Studio are no longer distributed. Hand-crafted Unix Makefiles are still there but 
getting out-of date (no ITK for instance).
</li>
<li>Compilation when using CMake is speeded-up a bit as dependencies of the tests on STIR libraries are reduced.</li>
<li>You should now point cmake to the STIR main directory, not <tt>STIR/src</tt>.
</ul>


<h3>Known problems</h3>
<ul>
<li>SPECT related
 <ul>
 <li> Do NOT use current PET projectors on SPECT Data. You will have to choose the "SPECT UB" projector 
    in all cases (see the sample .par files).</li>
 <li>The quantitative scale of reconstructed SPECT images is generally different than for PET reconstructions.
    It probably also behaves differently than the PET projectors when using different voxel sizes.</li>
 <li>Images are still written as PET Interfile (but this is ignored when reading).</li>
 <li>At present, the collimator model varies the width of the PSF linearly with distance. This was
   experimentally verified with some collimators (for normal distances to the collimator).
   However, we need to add the possibility to use different models.
  </li>
  <li><tt>list_projdata_info</tt> still reports SPECT data as if it's a PET scanner, but you can see
    all necessary geometric info from it anyway.</li>
  <li><tt>create_projdata_template</tt> only works for PET scanners. For SPECT, you could take the 
   sample Interfile header, modify it to your needs (and create an empty file for the binary data pointed to
   by the Interfile header).
  </li>
  </ul>
</li>
<li>Building with shared libraries is currently broken on many (all?) systems due to inter-dependencies between libraries.</li>
<li>This release is known to fail when both MPI and shared libraries are enabled. You will see linking errors in all non_MPI executables.</li>
<li>ECAT6 is no longer supported</li>
<li>The incremental interpolating back-projector still gives problems in the centre of the images
on some architectures/compiler/optimisation settings. We recommend to use the ray-tracing
matrix (with additional rays) instead.</li>
<li>When using <code>GRAPHICS=X</code> (i.e. on Unix/Linux/MacOSX) the window displaying
the bitmaps is sometimes empty. This might depend on your X server settings.
This affects <tt>manip_image</tt>, <tt>manip_projdata</tt> and <tt>display_projdata</tt>. 
We have currently no work-around (aside from using <code>GRAPHICS=PGM</code> or
<tt>stir_write_pgm</tt>).
</li>
</ul>

<h3>Major bug fixes</h3>
<ul>
<li>The MPI version of OSMAPOSL and OSSPS can now compute the value of the objective function. The corresponding test
now works.</li>
<li>The recon_test_pack routines now have an additional option such that they work with the MPI version.</li>
</ul>

<h3>Minor bug fixes</h3>
<ul>
<li>small changes to allow compilation with the CLang compiler version 5.0 and with Visual Studio 2013.</li>
<li>removed an error when writing a usage message when converting SimSET projection data.</li>
<li>when ECAT6 image IO is enabled, now first check if it's an ECAT6 file (this avoids strange
crashes when the file turns out not be ECAT6 after all).</li>
</ul>

<h3>Documentation changes</h3>
<ul>
<li>Added documentation on new features</li> 
<li>Added documentation on the <code>Interpolation</code> matrix. Somehow
we had forgotten to include that before.</li>
<li>Added more examples of shapes to <tt>samples/generate_image.par</tt>. Also corrected doxygen of
<code>EllipsoidalCylinder</code> for initial/final angle parameters.</li>
<li>The Wiki expands more and more, so use it in addition to the provided PDFs.
</li>
 </ul>

<h3>recon_test_pack changes</h3>
<ul>
<li>updated version number and added some clarification to the README.txt</li>
<li>added a test script for the SPECT reconstructions</li>
 </ul>

<h3>Other changes to tests</h3>
<ul>
<li>added tests for the ITK IO routines</li>
</ul>

<H2>What's new for developers (aside from what should be obvious
from the above):</H2>

<h3>Major bugs fixed</h3>
<ul>
<li>see above</li>
</ul>

<h3>New functionality</h3>
<ul>
<li>SPECT matrix modelling etc (see above)</li>
<li>expanded the class <code>PatientPosition</code> to allow left/right positioning, 
unknown positioning, and using DICOM-style abbreviations such as <tt>HFS</tt>.<br />
<strong>WARNING:</strong>The default constructor used to set the position to HFS
but now sets it to unknown.
</li>
<li>new classes <code>ImagingModality</code> and <code>ExamInfo</code>. The latter
contains the modality, <code>PatientPosition</code> and <code>TimeFrameDefinitions</code>.
</li>
<li>projection data (<code>ProjData</code>, <code>DynamicProjData</code> etc)
now have an <code>ExamInfo</code> member such that time frames etc can be passed along.
Their constructors have been modified accordingly  (<strong>NOT backwards-compatible</strong>).
</li>
<li>list mode data (<code>CListModeData</code>) changes (<strong>NOT backwards-compatible</strong>):
  <ul>
  <li> also has an ExamInfo. This member needs to be set by every derived class.</li>
  <li> removed <ocde>CListModeData::read_from_file</ocde>. Use <ocde>read_from_file&lt;CListModeData&gt;</code> instead.</li>
  <li> removed <ocde>CListModeData::get_scan_start_time_in_secs_since_1970()</code>. Get it via its <code>ExamInfo</code>.</li>
  </ul>
</li>
<li> using the above changes, <code>LmToProjData</code> properly writes time frame information to the projection data.</li>

<li>changes to <code>ProjDataInfoCylindrical</code> to allow different radii for different views, useful for SPECT (or an elliptical PET scanner?)</li>
</ul>

<h3>Other code changes</h3>
<ul>
<li>removed a few instances of <code>using std::string</code> etc from the include files
to avoid conflicts with global or non-std classes. This might mean you need to put these
statements in your .cxx files (or add <code>std::</code> in various places of course).</li>
<li>add 3rd argument to BSplines templates to specify type of internal constants (with a good default).
This gets rid of a lot of conversion warnings with MSVC but could also potentially speed up calculations.
</li>
<li>Many minor changes to avoid conversion warnings with MSVC.</li>
<li>modified get_directory_name in utilities.cxx to return "." if the directory info was not given.</li>
</ul>

<h3>Build system</h3>
<ul>
<li> We no longer add the STIR_LOCAL subdirectory in the main CMakeLists.txt
(if STIR_LOCAL is enabled). 
We now  leave that to STIR_LOCAL/stir_extra_dirs.cmake. This effectively means
that if you extended STIR by having a CMakeLists.txt in your local directory,
it will no longer be picked-up and you will have to edit your local 
stir_extra_dirs.cmake with something like
<code>
 add_subdirectory(${STIR_LOCAL})
</code>
</li>
<li> All CMake help-fules have been moved to a spearate sub-directory  <tt>src/cmake</tt> which is 
added to the CMazke module path. That means that you should use them for instance as
<pre>
include(stir_lib_target)
</pre>
</li>
</ul>
</body>

</html>

